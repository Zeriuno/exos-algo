#Examen 2 Algorithmique

2016-02-11
Daniele Pitrolo

##Exercice 1, Rush cherche

Démarche

Afin de réduire les tests dans la boucle de recherche, je remplace la valeur de la dernière case qui sera examinée par la valeur recherchée (en stockant la valeur dans une variable temporaire). Si la boucle de recherche se termine à la dernière case (celle dont j'ai substitué la valeur avec la cible de la recherche), c'est que la valeur recherchée n'a pas été trouvée ailleurs dans le tableau. Dans ce cas, je teste l'égalité entre la valeur recherchée et celle qui se trouvait dans la case au départ, et j'ajuste éventuellement le résultat de ma recherche en conséquence (si il n'y a pas d'égalité, la recherche est en échec).
L'algorithme est optimisé par rapport à la recherche séquentielle basique:

* parce que la recherche a lieu uniquement dans les cases dans lesquelles on a saisi des valeurs
* parce que, en assurant que le dernier résultat permettra de sortir de la boucle de recherche, on réduit les tests faits à chaque passage dans la boucle de recherche, en les remplaçant par une opération qui n'est effectuée que dans un cas particulier (recherche qui se termine à la dernière case).


procedure Initialisation(ref tab)
declarations
  parametre tab en tableau[MAX] d'entiers
  variable i en entiers
debut
  pour i variant de 1 à MAX par pas de 1 faire
    tab[i] ← -1
  finpour
fin

procedure Insertion_data_liste(ref liste, ref indice)
declarations
  parametres liste en tableau[MAX] d'entiers
  parametre indice en entiers
  variable num_saisi en entiers
debut
  [supposé donné par l'exercice]
fin

fonction recherche_seq(ref t, indice) en entiers
  parametre t en tableau[MAX] d'entiers
  parametre indice en entiers
  variable trouve, milieu, val_milieu, max, min, res en entiers
  variable stop en booléen
debut
  trouve ← -1
  tantque(trouve < 0) faire
    ecrire("Donnez le nombre recherché : ")
    lire(trouve)
    si(trouve < 0)
      ecrire("La valeur à chercher doit être positive. Veuillez ressasir.")
    finsi
  fintantque

  milieu ← (indice / 2) + 1
  val_milieu ← t[milieu]
  t[milieu] ← trouve


  res ← -1
  stop ← FAUX
  min ← 0


  tantque(stop = FAUX) faire
    min++
    si(t[min] = trouve)
      res ← min
      stop ← VRAI
    sinon
      max ← indice - min + 1
      si(t[max] = trouve)
        res ← max
        stop ← VRAI
      finsi
    finsi
  fintantque
  si(max = milieu)
    si(val_milieu != trouve)
      stop ← FAUX
      t[milieu] ← val_milieu
    finsi
  finsi

  si(stop = FAUX) /* Partie qui pourrait avoir lieu dans le programme principal en testant res - si(res = -1) */
    écrire("La valeur " trouve " n'est pas présente")
  sinon
    écrire("La valeur " trouve " est présente à l'indice " res)
  finsi
  retour(res)
fin

programme rushcherche
declarations
  constante MAX = 1000
  variable liste en tableau[MAX] d'entiers
  variable indice en entiers

debut
  Initialisation(liste)
  Insertion_data_liste(liste, indice)
  res ← recherche_seq(liste, indice)
fin


##Exercice 2, Baie dis donc!

a. Déclarations

constante TAILLE_BAIE = 14
constante COMBAIEN = 10
constante DEVICES = 4

type serveur en enregistrement
  champ nom_serveur en chaine de caracteres
  champ peripherique tableau[DEVICES] de chaines de caractères
fin d'enregistrement

type baie en enregistrement
  champ nom en chaine de caracteres
  champ rack en tableau[TAILLE_BAIE] de serveurs
fin d'enregistrement

variable armoire en tableau[COMBAIEN] de baies

b. Écrire

écrire("Le serveur de la baie " baielue " " armoire[baielue].nom " à l'emplacement " emplu " " est : " armoire[baielue].rack[emplu].nom_serveur "Le périphérique " periphlu " est " armoire[baielue].rack[emplu].peripherique[1])
